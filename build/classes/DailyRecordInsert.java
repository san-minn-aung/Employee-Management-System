/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//package SamMinAung;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author user
 */
public class DailyRecordInsert extends javax.swing.JFrame {

    /**
     * Creates new form DailyRecordInsert
     */
    
    DefaultTableModel table_model;
    Connection conn;
    ResultSet rs;
    Statement stmt;
    PreparedStatement ps;
    String sql;
    
    //constants
    final String ID_COLUMN = "ID";
    final String NAME_COLUMN = "Name";
    final String PRESENT_COLUMN = "Present";
    final String DEPARTMENT_COLUMN = "Department";
    
    public DailyRecordInsert() {
        initComponents();
        Time_Loader();
        Resource_Loader();
        
        
  
    }
    
    private void Time_Loader(){
        jXDatePicker.setFormats(new String[]{"dd MMMM yyyy"});
        DateTimeFormatter dttime = DateTimeFormatter.ofPattern("hh:mm:ss a");
        DateTimeFormatter dtdate = DateTimeFormatter.ofPattern("dd MMMM yyy");
        jXDatePicker.setDate(new Date());
        final Timer updater = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                LocalDateTime now = LocalDateTime.now();                
                txtTime.setText(dttime.format(now));                
            }
        });
        updater.start();
    }
    
    private void Resource_Loader(){
         table_model = (DefaultTableModel)jTable1.getModel();
         table_model.setRowCount(0);
         createDB();
         try {
             stmt = conn.createStatement();
             sql="select * from EmployeeTable";
             rs=stmt.executeQuery(sql);
             while(rs.next()){
                 populate(rs.getString("ID"), rs.getString("Name"), true, rs.getString("Dept"));//true is office present
             }
         } catch (SQLException ex) {
             Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
         }finally{
             try {
                 stmt.close();
                 conn.close();
                 System.out.println("connection shut down");
             } catch (SQLException ex) {
                 Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
         
        
    }
    
    private void filter(String query){
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(table_model);
        jTable1.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
    }
    
    public void populate(String _ID, String _Name, boolean _IsPresent, String _Dept){
        Object[] rowData = {_ID, _Name, _IsPresent, _Dept};
        table_model.addRow(rowData);            
    }
    
    void createDB(){
        try{
            
            String db="jdbc:ucanaccess://ProjectDatabase.accdb";
            conn=DriverManager.getConnection(db,"","");
            System.out.println("DB connected");
            
        }catch(Exception e){
            System.out.println("createDB error!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTime = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jXDatePicker = new org.jdesktop.swingx.JXDatePicker();
        cboDept = new javax.swing.JComboBox<>();
        txtID = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(200, 200));

        txtTime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtTime.setText("Time Running.....");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText(">");

        jXDatePicker.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jXDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePickerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jButton2)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jXDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        cboDept.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Departments", "Human Resource", "Information Technology", "Finance & Account" }));
        cboDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDeptActionPerformed(evt);
            }
        });

        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIDKeyReleased(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 51));
        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Present", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton4.setText("Select");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cboDept, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(68, 68, 68)
                            .addComponent(txtTime)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton3))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboDept, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(txtTime)
                    .addComponent(jButton4))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jXDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jXDatePickerActionPerformed

    private void txtIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyReleased
        // TODO add your handling code here:
        String query = txtID.getText().toString();
        filter(query);
    }//GEN-LAST:event_txtIDKeyReleased

    private void cboDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDeptActionPerformed
        // TODO add your handling code here:
        System.out.println(cboDept.getSelectedItem().toString()); 
    }//GEN-LAST:event_cboDeptActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //create connection
        createDB();
        //prepare employee attandace object
        Employee_Attendance Emp_Attendance = new Employee_Attendance();
        ArrayList<String> present_name_lists;
        
        //prepare current month(06/2018) & working object
        DateTimeFormatter dtdate = DateTimeFormatter.ofPattern("MM/yyyy");
        LocalDateTime now = LocalDateTime.now();  
        String Current_Month = dtdate.format(now);//get now current month
        Employee_Working emp_working;//initialize employee working object
        boolean isAlreadyWorkingMonth = false;
        //check already working object in database
        try {            
            stmt = conn.createStatement();
            sql = "select * from Working where Month_Of_Date Like '"+Current_Month+"'";//check already month record
            rs = stmt.executeQuery(sql);
            
            //if already month is exist, get object and update
            if(rs.next()){                
                byte[] st = rs.getBytes("Working_Count");
                ByteArrayInputStream baip = new ByteArrayInputStream(st);
                ObjectInputStream ois = new ObjectInputStream(baip);
                emp_working = (Employee_Working) ois.readObject();  
                isAlreadyWorkingMonth = true;
                
            }
            else{
                emp_working = new Employee_Working();
            }
            
            //checking process to save present list                   
            for (int i = 0; i < Department.values().length; i++) {
                present_name_lists = new ArrayList<>();
                for (int j = 0; j < table_model.getRowCount(); j++) {
                    //if today present
                    if(table_model.getValueAt(j,table_model.findColumn(DEPARTMENT_COLUMN)).equals(Department.values()[i].toString()) &&
                            (boolean)table_model.getValueAt(j,table_model.findColumn(PRESENT_COLUMN))){
                        //save present list
                        String empID = table_model.getValueAt(j,table_model.findColumn(ID_COLUMN)).toString();
                        present_name_lists.add(empID);
                        /*increase working count*/
                        /*check already employee or not */
                        //if already exist, plus one count
                        if(emp_working.map.containsKey(empID))
                        {   emp_working.map.put(empID, emp_working.map.get(empID)+1);}
                        else
                        {emp_working.map.put(empID, 1);}
                    }
                    
                }
                Emp_Attendance.map.put(Department.values()[i],present_name_lists);//save each department
            }
            
            //intialize to create stream conveter
            ByteArrayOutputStream baos;
            ObjectOutputStream oos;
            ByteArrayInputStream bais;
            
            /*insert attendace data*/
            //prepare current date(10-Jun-2018)
            java.sql.Date currentDate=new java.sql.Date(new Date().getTime()); 
            //convert stream to store in Attendace table
            baos = new ByteArrayOutputStream();
            oos = new ObjectOutputStream(baos);
            oos.writeObject(Emp_Attendance);//convert object stream
            byte[] employeeAsBytes = baos.toByteArray();
            bais = new ByteArrayInputStream(employeeAsBytes);//prepare ByteArrayInputStream
            
            sql = "insert into Attendance(Date, Present_Record) values(?,?)";
            ps = conn.prepareStatement(sql);
            ps.setDate(1,currentDate);
            ps.setBinaryStream(2, bais,employeeAsBytes.length);
            ps.executeUpdate();
            //<- Attendace record insert success->//
            System.out.println("Attendace record insert success");
            
            /*save working count data*/            
            //convert stream to store in working table
            baos = new ByteArrayOutputStream();
            oos = new ObjectOutputStream(baos);
            oos.writeObject(emp_working);//convert object stream
            byte[] empWorkingAsBytes = baos.toByteArray();
            bais = new ByteArrayInputStream(empWorkingAsBytes);//prepare ByteArrayInputStream
            if(isAlreadyWorkingMonth){
                 sql = "update Working set Working_Count = ? where Month_Of_Date = ?";
                 ps = conn.prepareStatement(sql);                 
                 ps.setBinaryStream(1, bais, empWorkingAsBytes.length);
                 ps.setString(2,Current_Month);
            }               
            else {
                sql = "insert into Working(Month_Of_Date,Working_Count) values (?,?)";
                ps = conn.prepareStatement(sql);
                ps.setString(1,Current_Month);
                ps.setBinaryStream(2, bais, empWorkingAsBytes.length);
            }                                       
            ps.executeUpdate();
            //<- Working count record save success->
            System.out.println("Working count record save success");
            
            
        } catch (SQLException ex) {
            Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                stmt.close();
                ps.close();
                conn.close();
                System.out.println("connection shut down");
            } catch (SQLException ex) {
                Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }                                                                    
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        createDB();
        try {
            stmt = conn.createStatement();
            sql = "select * from Working";
            rs = stmt.executeQuery(sql);
            while(rs.next()){
                
                byte[] st = rs.getBytes("Working_Count");
                ByteArrayInputStream baip = new ByteArrayInputStream(st);
                
                ObjectInputStream ois = new ObjectInputStream(baip);
                
                Employee_Working obj = (Employee_Working) ois.readObject();
                System.out.println("ok");
                
                //display data
                Set set = obj.map.entrySet();
                Iterator iterator = set.iterator();
                while(iterator.hasNext()) {
                    Map.Entry entry = (Map.Entry)iterator.next();
                    System.out.print("key is: "+ entry.getKey() + " & Value is: ");
                    System.out.println(entry.getValue());
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                stmt.close();
                conn.close();
                System.out.println("connection shut down");
            } catch (SQLException ex) {
                Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DailyRecordInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DailyRecordInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DailyRecordInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DailyRecordInsert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DailyRecordInsert().setVisible(true);
            }
        });
                
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboDept;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker;
    private javax.swing.JTextField txtID;
    private javax.swing.JLabel txtTime;
    // End of variables declaration//GEN-END:variables
}
