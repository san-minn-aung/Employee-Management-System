
import com.toedter.calendar.JCalendar;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jdesktop.swingx.JXDatePicker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MIN THET ZAN
 */
public class AttendenceAbsenceForm extends javax.swing.JFrame {
    DefaultTableModel table_model;
    Connection conn;
    ResultSet rs;
    Statement stmt;
    PreparedStatement ps;
    String sql;
    
    final String ID_COLUMN = "ID";
    final String NAME_COLUMN = "Name";
    final String PRESENT_COLUMN = "Present";
    final String DEPARTMENT_COLUMN = "Department";
    private Object jXDatePicker1;
    /**
     * Creates new form AttendenceAbsenceForm
     */
    public AttendenceAbsenceForm() throws SQLException {
        initComponents();
        Time_Loader();
        Resource_Loader();
    }
    
private void Time_Loader(){
        JXDatePicker picker=new JXDatePicker();
        picker.setFormats(new String[]{"dd MMMM yyyy"});
        DateTimeFormatter dttime = DateTimeFormatter.ofPattern("hh:mm:ss a");
        DateTimeFormatter dtdate = DateTimeFormatter.ofPattern("dd MMMM yyy");
        picker.setDate(new Date());
        final Timer updater = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                LocalDateTime now = LocalDateTime.now();                
                jLabel1.setText(dttime.format(now));                
            }
        });
        updater.start();
    }
private void Resource_Loader() throws SQLException{
         table_model = (DefaultTableModel)jTable1.getModel();
         table_model.setRowCount(0);
         
         try {
             createDB();
             stmt=conn.createStatement();
             sql="select * from Employee";
             rs=stmt.executeQuery(sql);
             while(rs.next()){
                 populate(rs.getString("ID"), rs.getString("Name"),rs.getString("Department"), true);//true is office present
             }
         } catch (SQLException ex) {
             Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
         }finally{
             try {
                 stmt.close();
                 conn.close();
                 System.out.println("connection close");
             } catch (SQLException ex) {
                 Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
             }
                 
         }
         
        
    }
  public void populate(String _ID, String _Name,String _Department, boolean _IsPresent){
        Object[] rowData = {_ID, _Name,_Department, _IsPresent};
        table_model.addRow(rowData);            
    }
    private void filter(String query){
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(table_model);
        jTable1.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
        
    }
 void createDB(){
        try{
            conn=DriverManager.getConnection("jdbc:ucanaccess://ProjectDatabase.accdb","Admin","");
            System.out.println("DB connected");
            
        }catch(Exception e){
            System.out.println(e.toString());
            System.out.println("createDB error!");
        }
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EMPLOYEE MANAGEMENT SYSTEM                                           ATTENDENCE RECORD");
        setLocation(new java.awt.Point(300, 100));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Department", "Present"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Running Time....");

        btnSave.setBackground(new java.awt.Color(255, 255, 255));
        btnSave.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 0, 0));
        btnSave.setText("Save");
        btnSave.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DEPARTMENTS", "IT", "FINANCE", "HR", "SECURITY" }));
        jComboBox1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        jLabel2.setText("Attendance or Absence");

        jSeparator1.setBackground(new java.awt.Color(255, 0, 51));
        jSeparator1.setForeground(new java.awt.Color(255, 0, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(63, 63, 63))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jXDatePicker2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            createDB();
            if(isExitingDate()){
                JOptionPane.showMessageDialog(null,"Already Today Record","Message",JOptionPane.WARNING_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null,"TOday is not there!","Message",JOptionPane.WARNING_MESSAGE);
                //prepare employee attandace object
                Employee_Attendance Emp_Attendance = new Employee_Attendance();
                ArrayList<String> present_name_lists;
                
                //prepare current month(06/2018) & working object
                DateTimeFormatter dtdate = DateTimeFormatter.ofPattern("MM/yyyy");
                LocalDateTime now = LocalDateTime.now();
                String Current_Month = dtdate.format(now);//get now current month
                Employee_Working emp_working;//initialize employee working object
                boolean isAlreadyWorkingMonth = false;
                //check already working object in database
                try {
                    stmt = conn.createStatement();
                    sql = "select * from Working where Month_Of_Date Like '"+Current_Month+"'";//check already month record
                    rs = stmt.executeQuery(sql);
                    
                    //if already month is exist, get object and update
                    if(rs.next()){
                        byte[] st = rs.getBytes("Working_Count");
                        ByteArrayInputStream baip = new ByteArrayInputStream(st);
                        ObjectInputStream ois = new ObjectInputStream(baip);
                        emp_working = (Employee_Working) ois.readObject();
                        isAlreadyWorkingMonth = true;
                        
                    }
                    else{
                        emp_working = new Employee_Working();
                    }
                    
                    //checking process to save present list
                    for (int i = 0; i < Department.values().length; i++) {
                        present_name_lists = new ArrayList<>();
                        for (int j = 0; j < table_model.getRowCount(); j++) {
                            //if today present
                            if(table_model.getValueAt(j,table_model.findColumn(DEPARTMENT_COLUMN)).equals(Department.values()[i].toString()) &&
                                    (boolean)table_model.getValueAt(j,table_model.findColumn(PRESENT_COLUMN))){
                                //save present list
                                String empID = table_model.getValueAt(j,table_model.findColumn(ID_COLUMN)).toString();
                                present_name_lists.add(empID);
                                /*increase working count*/
                                /*check already employee or not */
                                //if already exist, plus one count
                                if(emp_working.map.containsKey(empID))
                                {   emp_working.map.put(empID, emp_working.map.get(empID)+1);}
                                else
                                {emp_working.map.put(empID, 1);}
                            }
                            
                        }
                        Emp_Attendance.map.put(Department.values()[i],present_name_lists);//save each department
                    }
                    
                    //intialize to create stream conveter
                    ByteArrayOutputStream baos;
                    ObjectOutputStream oos;
                    ByteArrayInputStream bais;
                    
                    /*insert attendace data*/
                    //prepare current date(10-Jun-2018)
                    java.sql.Date currentDate=new java.sql.Date(new Date().getTime());
                    //convert stream to store in Attendace table
                    baos = new ByteArrayOutputStream();
                    oos = new ObjectOutputStream(baos);
                    oos.writeObject(Emp_Attendance);//convert object stream
                    byte[] employeeAsBytes = baos.toByteArray();
                    bais = new ByteArrayInputStream(employeeAsBytes);//prepare ByteArrayInputStream
                    
                    sql = "insert into Attendance(Date, Present_Record) values(?,?)";
                    ps = conn.prepareStatement(sql);
                    ps.setDate(1,currentDate);
                    ps.setBinaryStream(2, bais,employeeAsBytes.length);
                    ps.executeUpdate();
                    //<- Attendace record insert success->//
                    System.out.println("Attendace record insert success");
                    JOptionPane.showMessageDialog(null,"Recorded Successful","Message",JOptionPane.INFORMATION_MESSAGE);
                    /*save working count data*/
                    //convert stream to store in working table
                    baos = new ByteArrayOutputStream();
                    oos = new ObjectOutputStream(baos);
                    oos.writeObject(emp_working);//convert object stream
                    byte[] empWorkingAsBytes = baos.toByteArray();
                    bais = new ByteArrayInputStream(empWorkingAsBytes);//prepare ByteArrayInputStream
                    if(isAlreadyWorkingMonth){
                        sql = "update Working set Working_Count = ? where Month_Of_Date = ?";
                        ps = conn.prepareStatement(sql);
                        ps.setBinaryStream(1, bais, empWorkingAsBytes.length);
                        ps.setString(2,Current_Month);
                    }
                    else {
                        sql = "insert into Working(Month_Of_Date,Working_Count) values (?,?)";
                        ps = conn.prepareStatement(sql);
                        ps.setString(1,Current_Month);
                        ps.setBinaryStream(2, bais, empWorkingAsBytes.length);
                    }
                    ps.executeUpdate();
                    //<- Working count record save success->
                    System.out.println("Working count record save success");
                    
                    
                } catch (SQLException ex) {
                    Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
                } finally{
                    try {
                        stmt.close();
                        ps.close();
                        conn.close();
                        System.out.println("connection shut down");
                    } catch (SQLException ex) {
                        Logger.getLogger(DailyRecordInsert.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
               JOptionPane.showMessageDialog(null,"Recorded Successful","Message",JOptionPane.INFORMATION_MESSAGE);
            }   
        }
        catch (SQLException ex) {
            Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
        } 
        finally{
            try {
                stmt.close();
//                ps.close();
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }                                                                    
       
    }//GEN-LAST:event_btnSaveActionPerformed
 
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String query=jComboBox1.getSelectedItem().toString();
        filter(query);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        new HomePageForm().setVisible(true);
    }//GEN-LAST:event_formWindowClosed

public  boolean isExitingDate() throws SQLException{

    Date dateObj = jXDatePicker2.getDate();
    DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyy");
    String picker_date = dateFormat.format(dateObj);
 
    String currentDay=picker_date.trim().split("-")[0];
    System.out.println("Current Day"+currentDay);
    String currentMonth = picker_date.trim().split("-")[1];
    System.out.println("Current Month"+currentMonth);
    String currentYear = picker_date.trim().split("-")[2];
//    
    sql = "select count(*) as rowcount from Attendance where DAY(Date) = '"+currentDay+"' AND MONTH(Date) = '"+currentMonth+"'  AND YEAR(Date) = '"+currentYear+"'" ;
    stmt = conn.createStatement();
    rs = stmt.executeQuery(sql);
    rs.next();
    int rowcount = rs.getInt("rowcount");
   
    if(rowcount>0){
        return true;
    }
    else{
        return false;
    }
    
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new AttendenceAbsenceForm().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(AttendenceAbsenceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    // End of variables declaration//GEN-END:variables

    private static class jXDatePicker1 {

        public jXDatePicker1() {
        }
    }

}